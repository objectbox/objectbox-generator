// Code generated by ObjectBox; DO NOT EDIT.

#include "schema.obx.hpp"

const obx::Property<Typeful, OBXPropertyType_Long> Typeful_::id(1);
const obx::Property<Typeful, OBXPropertyType_Int> Typeful_::int_(2);
const obx::Property<Typeful, OBXPropertyType_Byte> Typeful_::int8(3);
const obx::Property<Typeful, OBXPropertyType_Short> Typeful_::int16(4);
const obx::Property<Typeful, OBXPropertyType_Int> Typeful_::int32(5);
const obx::Property<Typeful, OBXPropertyType_Long> Typeful_::int64(6);
const obx::Property<Typeful, OBXPropertyType_Int> Typeful_::uint(7);
const obx::Property<Typeful, OBXPropertyType_Byte> Typeful_::uint8(8);
const obx::Property<Typeful, OBXPropertyType_Short> Typeful_::uint16(9);
const obx::Property<Typeful, OBXPropertyType_Int> Typeful_::uint32(10);
const obx::Property<Typeful, OBXPropertyType_Long> Typeful_::uint64(11);
const obx::Property<Typeful, OBXPropertyType_Bool> Typeful_::bool_(12);
const obx::Property<Typeful, OBXPropertyType_String> Typeful_::string(13);
const obx::Property<Typeful, OBXPropertyType_StringVector> Typeful_::stringvector(14);
const obx::Property<Typeful, OBXPropertyType_Byte> Typeful_::byte(15);
const obx::Property<Typeful, OBXPropertyType_Byte> Typeful_::ubyte(16);
const obx::Property<Typeful, OBXPropertyType_ByteVector> Typeful_::bytevector(17);
const obx::Property<Typeful, OBXPropertyType_ByteVector> Typeful_::ubytevector(18);
const obx::Property<Typeful, OBXPropertyType_Float> Typeful_::float32(19);
const obx::Property<Typeful, OBXPropertyType_Double> Typeful_::float64(20);
const obx::Property<Typeful, OBXPropertyType_Float> Typeful_::float_(21);
const obx::Property<Typeful, OBXPropertyType_FloatVector> Typeful_::floatvector(22);
const obx::Property<Typeful, OBXPropertyType_Double> Typeful_::double_(23);
const obx::RelationProperty<Typeful, ns::AnnotatedEntity> Typeful_::relId(24);

void Typeful::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const Typeful& object) {
    fbb.Clear();
    auto offsetstring = fbb.CreateString(object.string);
    auto offsetstringvector = fbb.CreateVectorOfStrings(object.stringvector);
    auto offsetbytevector = fbb.CreateVector(object.bytevector);
    auto offsetubytevector = fbb.CreateVector(object.ubytevector);
    auto offsetfloatvector = fbb.CreateVector(object.floatvector);
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.AddElement(4, object.id);
    fbb.AddElement(6, object.int_);
    fbb.AddElement(8, object.int8);
    fbb.AddElement(10, object.int16);
    fbb.AddElement(12, object.int32);
    fbb.AddElement(14, object.int64);
    fbb.AddElement(16, object.uint);
    fbb.AddElement(18, object.uint8);
    fbb.AddElement(20, object.uint16);
    fbb.AddElement(22, object.uint32);
    fbb.AddElement(24, object.uint64);
    fbb.AddElement(26, object.bool_ ? 1 : 0);
    fbb.AddOffset(28, offsetstring);
    fbb.AddOffset(30, offsetstringvector);
    fbb.AddElement(32, object.byte);
    fbb.AddElement(34, object.ubyte);
    fbb.AddOffset(36, offsetbytevector);
    fbb.AddOffset(38, offsetubytevector);
    fbb.AddElement(40, object.float32);
    fbb.AddElement(42, object.float64);
    fbb.AddElement(44, object.float_);
    fbb.AddOffset(46, offsetfloatvector);
    fbb.AddElement(48, object.double_);
    fbb.AddElement(50, object.relId);
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

Typeful Typeful::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    Typeful object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<Typeful> Typeful::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<Typeful>(new Typeful());
    fromFlatBuffer(data, size, *object);
    return object;
}

void Typeful::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, Typeful& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    outObject.int_ = table->GetField<int32_t>(6, 0);
    outObject.int8 = table->GetField<int8_t>(8, 0);
    outObject.int16 = table->GetField<int16_t>(10, 0);
    outObject.int32 = table->GetField<int32_t>(12, 0);
    outObject.int64 = table->GetField<int64_t>(14, 0);
    outObject.uint = table->GetField<uint32_t>(16, 0);
    outObject.uint8 = table->GetField<uint8_t>(18, 0);
    outObject.uint16 = table->GetField<uint16_t>(20, 0);
    outObject.uint32 = table->GetField<uint32_t>(22, 0);
    outObject.uint64 = table->GetField<uint64_t>(24, 0);
    outObject.bool_ = table->GetField<uint8_t>(26, 0) != 0;
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(28);
        if (ptr) {
            outObject.string.assign(ptr->c_str(), ptr->size());
        } else {
            outObject.string.clear();
        }
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>*>(30);
        if (ptr) {
            outObject.stringvector.reserve(ptr->size());
            for (flatbuffers::uoffset_t i = 0; i < ptr->size(); i++) {
                auto* itemPtr = ptr->Get(i);
                if (itemPtr) outObject.stringvector.emplace_back(itemPtr->c_str());
            }
        } else {
            outObject.stringvector.clear();
        }
    }
    outObject.byte = table->GetField<int8_t>(32, 0);
    outObject.ubyte = table->GetField<uint8_t>(34, 0);
    {
        auto* ptr = table->GetPointer<const flatbuffers::Vector<int8_t>*>(36);
        if (ptr) { 
            outObject.bytevector.assign(ptr->begin(), ptr->end());
        } else {
            outObject.bytevector.clear();
        }
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::Vector<uint8_t>*>(38);
        if (ptr) { 
            outObject.ubytevector.assign(ptr->begin(), ptr->end());
        } else {
            outObject.ubytevector.clear();
        }
    }
    outObject.float32 = table->GetField<float>(40, 0.0f);
    outObject.float64 = table->GetField<double>(42, 0.0);
    outObject.float_ = table->GetField<float>(44, 0.0f);
    {
        auto* ptr = table->GetPointer<const flatbuffers::Vector<float>*>(46);
        if (ptr) { 
            outObject.floatvector.assign(ptr->begin(), ptr->end());
        } else {
            outObject.floatvector.clear();
        }
    }
    outObject.double_ = table->GetField<double>(48, 0.0);
    outObject.relId = table->GetField<obx_id>(50, 0);
}

const obx::Property<ns::Annotated, OBXPropertyType_Long> ns::Annotated_::identifier(1);
const obx::Property<ns::Annotated, OBXPropertyType_String> ns::Annotated_::fullName(2);
const obx::Property<ns::Annotated, OBXPropertyType_Date> ns::Annotated_::time(3);
const obx::RelationProperty<ns::Annotated, Typeful> ns::Annotated_::relId(4);
const obx::Property<ns::Annotated, OBXPropertyType_String> ns::Annotated_::unique(5);
const obx::Property<ns::Annotated, OBXPropertyType_String> ns::Annotated_::uniqueValue(6);
const obx::Property<ns::Annotated, OBXPropertyType_String> ns::Annotated_::uniqueHash(7);
const obx::Property<ns::Annotated, OBXPropertyType_String> ns::Annotated_::uniqueHash64(8);
const obx::Property<ns::Annotated, OBXPropertyType_Int> ns::Annotated_::uid(9);
const obx::Property<ns::Annotated, OBXPropertyType_FloatVector> ns::Annotated_::hnswVector(10);
const obx::RelationStandalone<ns::Annotated, Typeful> ns::Annotated_::typefuls(1);
const obx::RelationStandalone<ns::Annotated, Typeful> ns::Annotated_::m2m(2);

void ns::Annotated::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const ns::Annotated& object) {
    fbb.Clear();
    auto offsetfullName = fbb.CreateString(object.fullName);
    auto offsetunique = fbb.CreateString(object.unique);
    auto offsetuniqueValue = fbb.CreateString(object.uniqueValue);
    auto offsetuniqueHash = fbb.CreateString(object.uniqueHash);
    auto offsetuniqueHash64 = fbb.CreateString(object.uniqueHash64);
    auto offsethnswVector = fbb.CreateVector(object.hnswVector);
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.AddElement(4, object.identifier);
    fbb.AddOffset(6, offsetfullName);
    fbb.AddElement(8, object.time);
    fbb.AddElement(10, object.relId);
    fbb.AddOffset(12, offsetunique);
    fbb.AddOffset(14, offsetuniqueValue);
    fbb.AddOffset(16, offsetuniqueHash);
    fbb.AddOffset(18, offsetuniqueHash64);
    fbb.AddElement(20, object.uid);
    fbb.AddOffset(22, offsethnswVector);
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

ns::Annotated ns::Annotated::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    ns::Annotated object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<ns::Annotated> ns::Annotated::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<ns::Annotated>(new ns::Annotated());
    fromFlatBuffer(data, size, *object);
    return object;
}

void ns::Annotated::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, ns::Annotated& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.identifier = table->GetField<obx_id>(4, 0);
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(6);
        if (ptr) {
            outObject.fullName.assign(ptr->c_str(), ptr->size());
        } else {
            outObject.fullName.clear();
        }
    }
    outObject.time = table->GetField<int64_t>(8, 0);
    outObject.relId = table->GetField<obx_id>(10, 0);
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(12);
        if (ptr) {
            outObject.unique.assign(ptr->c_str(), ptr->size());
        } else {
            outObject.unique.clear();
        }
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(14);
        if (ptr) {
            outObject.uniqueValue.assign(ptr->c_str(), ptr->size());
        } else {
            outObject.uniqueValue.clear();
        }
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(16);
        if (ptr) {
            outObject.uniqueHash.assign(ptr->c_str(), ptr->size());
        } else {
            outObject.uniqueHash.clear();
        }
    }
    {
        auto* ptr = table->GetPointer<const flatbuffers::String*>(18);
        if (ptr) {
            outObject.uniqueHash64.assign(ptr->c_str(), ptr->size());
        } else {
            outObject.uniqueHash64.clear();
        }
    }
    outObject.uid = table->GetField<int32_t>(20, 0);
    {
        auto* ptr = table->GetPointer<const flatbuffers::Vector<float>*>(22);
        if (ptr) outObject.hnswVector.assign(ptr->begin(), ptr->end());
        else {
            outObject.hnswVector.clear();
        }
    }
}

const obx::Property<ns::TSDate, OBXPropertyType_Long> ns::TSDate_::id(1);
const obx::Property<ns::TSDate, OBXPropertyType_Date> ns::TSDate_::timestamp(2);

void ns::TSDate::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const ns::TSDate& object) {
    fbb.Clear();
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.AddElement(4, object.id);
    fbb.AddElement(6, object.timestamp);
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

ns::TSDate ns::TSDate::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    ns::TSDate object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<ns::TSDate> ns::TSDate::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<ns::TSDate>(new ns::TSDate());
    fromFlatBuffer(data, size, *object);
    return object;
}

void ns::TSDate::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, ns::TSDate& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    outObject.timestamp = table->GetField<int64_t>(6, 0);
}

const obx::Property<ns::TSDateNano, OBXPropertyType_Long> ns::TSDateNano_::id(1);
const obx::Property<ns::TSDateNano, OBXPropertyType_DateNano> ns::TSDateNano_::timestamp(2);

void ns::TSDateNano::_OBX_MetaInfo::toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const ns::TSDateNano& object) {
    fbb.Clear();
    flatbuffers::uoffset_t fbStart = fbb.StartTable();
    fbb.AddElement(4, object.id);
    fbb.AddElement(6, object.timestamp);
    flatbuffers::Offset<flatbuffers::Table> offset;
    offset.o = fbb.EndTable(fbStart);
    fbb.Finish(offset);
}

ns::TSDateNano ns::TSDateNano::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t size) {
    ns::TSDateNano object;
    fromFlatBuffer(data, size, object);
    return object;
}

std::unique_ptr<ns::TSDateNano> ns::TSDateNano::_OBX_MetaInfo::newFromFlatBuffer(const void* data, size_t size) {
    auto object = std::unique_ptr<ns::TSDateNano>(new ns::TSDateNano());
    fromFlatBuffer(data, size, *object);
    return object;
}

void ns::TSDateNano::_OBX_MetaInfo::fromFlatBuffer(const void* data, size_t, ns::TSDateNano& outObject) {
    const auto* table = flatbuffers::GetRoot<flatbuffers::Table>(data);
    assert(table);
    outObject.id = table->GetField<obx_id>(4, 0);
    outObject.timestamp = table->GetField<int64_t>(6, 0);
}

