// Code generated by ObjectBox; DO NOT EDIT.

#pragma once

#include <cstdbool>
#include <cstdint>

#include "flatbuffers/flatbuffers.h"
#include "objectbox.h"
#include "objectbox.hpp"

namespace ns { struct AnnotatedEntity; }

struct Typeful_;

/// Entity documentation is copied
/// into the generated output
struct Typeful {
    obx_id id;
    int32_t int_;
    int8_t int8;
    int16_t int16;
    int32_t int32;
    int64_t int64;
    uint32_t uint;
    uint8_t uint8;
    uint16_t uint16;
    uint32_t uint32;
    uint64_t uint64;
    bool bool_;
    std::string string;
    std::vector<std::string> stringvector;
    int8_t byte;
    uint8_t ubyte;
    std::vector<int8_t> bytevector;
    std::vector<uint8_t> ubytevector;
    float float32;
    double float64;
    float float_;
    std::vector<float> floatvector;
    double double_;
    /// Relation to an entity declared later in the same file
    obx_id relId;

    struct _OBX_MetaInfo {
        static constexpr obx_schema_id entityId() { return 1; }
    
        static void setObjectId(Typeful& object, obx_id newId) { object.id = newId; }
    
        /// Write given object to the FlatBufferBuilder
        static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const Typeful& object);
    
        /// Read an object from a valid FlatBuffer
        static Typeful fromFlatBuffer(const void* data, size_t size);
    
        /// Read an object from a valid FlatBuffer
        static std::unique_ptr<Typeful> newFromFlatBuffer(const void* data, size_t size);
    
        /// Read an object from a valid FlatBuffer
        static void fromFlatBuffer(const void* data, size_t size, Typeful& outObject);
    };
};

struct Typeful_ {
    static const obx::Property<Typeful, OBXPropertyType_Long> id;
    static const obx::Property<Typeful, OBXPropertyType_Int> int_;
    static const obx::Property<Typeful, OBXPropertyType_Byte> int8;
    static const obx::Property<Typeful, OBXPropertyType_Short> int16;
    static const obx::Property<Typeful, OBXPropertyType_Int> int32;
    static const obx::Property<Typeful, OBXPropertyType_Long> int64;
    static const obx::Property<Typeful, OBXPropertyType_Int> uint;
    static const obx::Property<Typeful, OBXPropertyType_Byte> uint8;
    static const obx::Property<Typeful, OBXPropertyType_Short> uint16;
    static const obx::Property<Typeful, OBXPropertyType_Int> uint32;
    static const obx::Property<Typeful, OBXPropertyType_Long> uint64;
    static const obx::Property<Typeful, OBXPropertyType_Bool> bool_;
    static const obx::Property<Typeful, OBXPropertyType_String> string;
    static const obx::Property<Typeful, OBXPropertyType_StringVector> stringvector;
    static const obx::Property<Typeful, OBXPropertyType_Byte> byte;
    static const obx::Property<Typeful, OBXPropertyType_Byte> ubyte;
    static const obx::Property<Typeful, OBXPropertyType_ByteVector> bytevector;
    static const obx::Property<Typeful, OBXPropertyType_ByteVector> ubytevector;
    static const obx::Property<Typeful, OBXPropertyType_Float> float32;
    static const obx::Property<Typeful, OBXPropertyType_Double> float64;
    static const obx::Property<Typeful, OBXPropertyType_Float> float_;
    static const obx::Property<Typeful, OBXPropertyType_FloatVector> floatvector;
    static const obx::Property<Typeful, OBXPropertyType_Double> double_;
    static const obx::RelationProperty<Typeful, ns::AnnotatedEntity> relId;
};

struct Typeful; 

namespace ns {
struct Annotated_;

struct Annotated {
    /// Objectbox requires an ID property.
    /// It is recognized automatically if it has a right name ("id") or needs to be annotated otherwise.
    obx_id identifier;
    std::string fullName;
    int64_t time;
    obx_id relId;
    /// unique on string without index type implies HASH index
    std::string unique;
    std::string uniqueValue;
    std::string uniqueHash;
    std::string uniqueHash64;
    /// unique on string without index type implies HASH index
    int32_t uid;
    std::vector<float> hnswVectorEuclidean;
    std::vector<float> hnswVectorCosine;
    std::vector<float> hnswVectorDot;
    std::vector<float> hnswVectorDotNonNormalized;

    struct _OBX_MetaInfo {
        static constexpr obx_schema_id entityId() { return 2; }
    
        static void setObjectId(Annotated& object, obx_id newId) { object.identifier = newId; }
    
        /// Write given object to the FlatBufferBuilder
        static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const Annotated& object);
    
        /// Read an object from a valid FlatBuffer
        static Annotated fromFlatBuffer(const void* data, size_t size);
    
        /// Read an object from a valid FlatBuffer
        static std::unique_ptr<Annotated> newFromFlatBuffer(const void* data, size_t size);
    
        /// Read an object from a valid FlatBuffer
        static void fromFlatBuffer(const void* data, size_t size, Annotated& outObject);
    };
};

struct Annotated_ {
    static const obx::Property<Annotated, OBXPropertyType_Long> identifier;
    static const obx::Property<Annotated, OBXPropertyType_String> fullName;
    static const obx::Property<Annotated, OBXPropertyType_Date> time;
    static const obx::RelationProperty<Annotated, Typeful> relId;
    static const obx::Property<Annotated, OBXPropertyType_String> unique;
    static const obx::Property<Annotated, OBXPropertyType_String> uniqueValue;
    static const obx::Property<Annotated, OBXPropertyType_String> uniqueHash;
    static const obx::Property<Annotated, OBXPropertyType_String> uniqueHash64;
    static const obx::Property<Annotated, OBXPropertyType_Int> uid;
    static const obx::Property<Annotated, OBXPropertyType_FloatVector> hnswVectorEuclidean;
    static const obx::Property<Annotated, OBXPropertyType_FloatVector> hnswVectorCosine;
    static const obx::Property<Annotated, OBXPropertyType_FloatVector> hnswVectorDot;
    static const obx::Property<Annotated, OBXPropertyType_FloatVector> hnswVectorDotNonNormalized;
    static const obx::RelationStandalone<Annotated, Typeful> typefuls;
    static const obx::RelationStandalone<Annotated, Typeful> m2m;
};
}  // namespace ns


namespace ns {
struct TSDate_;

struct TSDate {
    obx_id id;
    int64_t timestamp;

    struct _OBX_MetaInfo {
        static constexpr obx_schema_id entityId() { return 3; }
    
        static void setObjectId(TSDate& object, obx_id newId) { object.id = newId; }
    
        /// Write given object to the FlatBufferBuilder
        static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const TSDate& object);
    
        /// Read an object from a valid FlatBuffer
        static TSDate fromFlatBuffer(const void* data, size_t size);
    
        /// Read an object from a valid FlatBuffer
        static std::unique_ptr<TSDate> newFromFlatBuffer(const void* data, size_t size);
    
        /// Read an object from a valid FlatBuffer
        static void fromFlatBuffer(const void* data, size_t size, TSDate& outObject);
    };
};

struct TSDate_ {
    static const obx::Property<TSDate, OBXPropertyType_Long> id;
    static const obx::Property<TSDate, OBXPropertyType_Date> timestamp;
};
}  // namespace ns


namespace ns {
struct TSDateNano_;

struct TSDateNano {
    obx_id id;
    int64_t timestamp;

    struct _OBX_MetaInfo {
        static constexpr obx_schema_id entityId() { return 4; }
    
        static void setObjectId(TSDateNano& object, obx_id newId) { object.id = newId; }
    
        /// Write given object to the FlatBufferBuilder
        static void toFlatBuffer(flatbuffers::FlatBufferBuilder& fbb, const TSDateNano& object);
    
        /// Read an object from a valid FlatBuffer
        static TSDateNano fromFlatBuffer(const void* data, size_t size);
    
        /// Read an object from a valid FlatBuffer
        static std::unique_ptr<TSDateNano> newFromFlatBuffer(const void* data, size_t size);
    
        /// Read an object from a valid FlatBuffer
        static void fromFlatBuffer(const void* data, size_t size, TSDateNano& outObject);
    };
};

struct TSDateNano_ {
    static const obx::Property<TSDateNano, OBXPropertyType_Long> id;
    static const obx::Property<TSDateNano, OBXPropertyType_DateNano> timestamp;
};
}  // namespace ns

